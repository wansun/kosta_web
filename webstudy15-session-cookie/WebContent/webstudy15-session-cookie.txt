** Session & Cookie **
: 사용자 정보를 일정조건동안 유지 (사용자 상태정보 유지)
	ex) 로그인, 오늘 본 상품 정보 등등
	
Http 특성 -> Stateless 즉 사용자 상태정보를 유지하지 않는 특성
			(이유는 서버의 부하를 방지하여 사용자에게 신속한
			서비스를 하기 위해)
(1) Cookie : 사용자 정보를 클라이언트 측에 저장
		데이터 타입의 제한 (문자열로 한정) 및 저장 용량의 제한있다
		클라이언트 측에서 사용범위를 제한할 수 있고
		HttpSession에 비해 보안성이 약하다
		Cookie는 클라이언트 측에 저장되므로 서버의 부담을 줄일 수 있다.
		일반적으로 Cookie 의 유효시간을 설정한다.
		만약 유효시간을 설정하지 않으면 브라우저가 실행되는
		동아난 Cookie가 유지된다.
									 WAS(Web Container)
		client browser A --request--> SetCookieServlet
									  Cookie 생성(name,value)
						<--response--response를 이용해 쿠키 전달
						
		client browser B --request--> GetCookieServlet
								      request.getCookies() : Cookie[]
									     를 이용해 사용자의 쿠키정보들을
									     확인할 수 있다
	   ** Cookie를 프로그램 상에서 삭제하고자 할 때 **
	    cookies[i].setMaxAge(0); //쿠키 유효시간 만료
	    cookies[i].addCookie(cookies[i]); //해당 쿠키를 재전송하면 만료됨
									     				

(2) Session(HttpSession) : 사용자 정보를 서버 측에 저장
	저장하는 데이터의 타입과 용량에 제한은 없다.
	쿠키에 비해 보안상 유리하다.
	WAS에 세션의 유효시간은 별도로 명시되어있다.
	(예 - tomcat/conf/web.xml 에 session time out 30분 설정)
	웹어플리케이션 차원에서 별도의 timeout시간을 설정할 수 있다.
	webapplication의 DD(Deployment Descriptor)인 web.xml에 아래와 같이 설정하면 된다.
	<session-config>
	<session-timeout>10</session-timeout> <!-- 10분간 유효 -->
	</session-config>
	
	지정한 유효시간 내에 새로운 요청이 없을 경우 세션은 만료된다.
	
	HttpSession 관련 주요 메서드
	1. request.getSession() or getSession(true)
		: 기존 세션이 없으면 새로 생성
		  기존 세션이 있으면 기존 세션을 리턴한다.
		  세션 생성 시점에 내부적으로 세션아이디 정보를 클라이언트로
		  쿠키 정보로 전송하고 이후 접속시에는 이 쿠키 정보를 이용해
		  기존 세션 유지 여부를 판단하게 된다.
	2. request.getSession(false)
		: 기존 세션이 있으면 기존 세션을 반환하고
		  기존 세션이 없으면 null을 반환한다.
		  ex) HttpSession session=request.getSession(false);
		  if(session==null)
		  	로그인화면으로 이동
		  else
		  	메일 또는 카페 화면을 제공한다.
	3. HttpSession 의 주요 메서드
		: session.setAttribute(name,value); //세션에 정보를 저장한다
		  session.getAttribute(name) : Object //세션에 저장된 정보를 반환받는다
		  session.removeAttribute(name) //세션에 저장된 정보를 삭제한다.
		  session.invalidate(); //세션을 무효화 시킨다 ex)로그아웃

	HttpSession 실행흐름
								WAS(Web Container)
	client browser --request--> if(아이디 패스워드 일치하면)
								request.getSession();
								위 코드는 세션이 없으면 새로 생성
								세션이 없으면 기존 세션을 반호나
								서버상에서 저장되어 있는 세션 정보와
								클라이언트 쿠키에 내장되어 있는 정보를
								비교하여 기존에 세션 생성 여부를 판단한다.
							        만약 세션이 생성되어 있지 않으면면
							        쿠키로 세션아이디를 저장해 클라이언트로 전송한다.
                  <--response--
                  
 								인증한 사용자만 입장가능한 서비스                 
    client browser --request--> HttpSession session=request.getSession(false);
    							if(session!=null){
    								메일 및 카페서비스 제공
    							}else{
    								로그인이 필요하므로 로그인으로 이동
    							}            
    							
    							위의 getSession(false)는 기존 세션이 생성되어 클라이언트
    							쿠키로 저장되어 있는 사용자라면 기존 세션이 반환되고
    							세션이 생성되어 있찌 않은 상태 즉 클라이언트 측에 세션아이디가
    							저장된 쿠키가 없는 사용자는 null이 반환된다.
    
    **jsp상에서 세션 처리**							
 <%--
	JSP가 웹 컨테이너에 의해 java로 생성될 때
	자동으로 request(HttpServletRequest)
	application (ServletContext)
	session (HttpSession)
	등은 생성하는 코드가 만들어지고
	실행되어 사용될 수 있다.
 --%>
<%=request %><br>
<%=application %><br>
<%=session %><br>